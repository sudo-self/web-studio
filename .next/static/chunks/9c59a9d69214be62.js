(globalThis.TURBOPACK||(globalThis.TURBOPACK=[])).push(["object"==typeof document?document.currentScript:void 0,14588,t=>{"use strict";t.s(["SettingsProvider",()=>i,"useSettings",()=>n]);var e=t.i(99596),r=t.i(11881);let o=(0,r.createContext)(void 0),i=t=>{let{children:i}=t,[n,s]=(0,r.useState)({aiEndpoint:"/api/ai",theme:"light",fontSize:14,autoFormat:!0}),a=async t=>{if(!t.trim())return"";try{let e=await fetch(n.aiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:t})});if(!e.ok)throw Error("AI API error: ".concat(e.status));return(await e.json()).text||"No response from AI"}catch(t){return console.error("AI request failed:",t),"Error: ".concat(t instanceof Error?t.message:"Unknown error")}};return(0,e.jsx)(o.Provider,{value:{settings:n,updateSettings:t=>s(e=>({...e,...t})),askAI:a},children:i})},n=()=>{let t=(0,r.useContext)(o);if(!t)throw Error("useSettings must be used within a SettingsProvider");return t}}]);